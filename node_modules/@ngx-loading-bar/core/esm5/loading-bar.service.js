import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, NgZone, Optional } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LoadingBarState } from './loading-bar.state';
import { Subject, combineLatest, Observable } from 'rxjs';
import { switchMap, map, startWith } from 'rxjs/operators';
import { LOADING_BAR_CONFIG } from './loading-bar.config';
import * as i0 from "@angular/core";
import * as i1 from "./loading-bar.config";
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService(platformId, config, zone) {
        var _this = this;
        if (config === void 0) { config = {}; }
        this.platformId = platformId;
        this.config = config;
        this.zone = zone;
        this.refs = {};
        this.streams$ = new Subject();
        this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () { return combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), runInZone(this.zone), map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));
    }
    Object.defineProperty(LoadingBarService.prototype, "progress$", {
        /** @deprecated use `value$` instead. */
        get: function () {
            return this.value$;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.start = function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        this.useRef().start(initialValue);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.set = function (value) {
        this.useRef().set(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.increment = function (value) {
        this.useRef().increment(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.complete = function () {
        this.useRef().complete();
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.stop = function () {
        this.useRef().stop();
    };
    LoadingBarService.prototype.useRef = function (id) {
        if (id === void 0) { id = 'default'; }
        if (!this.refs[id]) {
            this.refs[id] = new LoadingBarState(this.config);
            this.streams$.next();
            if (!isPlatformBrowser(this.platformId)) {
                this.refs[id].disable();
            }
        }
        return this.refs[id];
    };
    LoadingBarService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOADING_BAR_CONFIG,] }] },
        { type: NgZone, decorators: [{ type: Optional }] }
    ]; };
    LoadingBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.LOADING_BAR_CONFIG, 8), i0.ɵɵinject(i0.NgZone, 8)); }, token: LoadingBarService, providedIn: "root" });
    LoadingBarService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(PLATFORM_ID)),
        __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)),
        __param(2, Optional()),
        __metadata("design:paramtypes", [Object, Object, NgZone])
    ], LoadingBarService);
    return LoadingBarService;
}());
export { LoadingBarService };
// https://stackoverflow.com/a/57452361/1406096
export function runInZone(zone) {
    if (!zone) {
        return function (source) { return source; };
    }
    return function (source) {
        return new Observable(function (observer) {
            return source.subscribe(function (value) { return zone.run(function () { return observer.next(value); }); }, function (e) { return zone.run(function () { return observer.error(e); }); }, function () { return zone.run(function () { return observer.complete(); }); });
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbG9hZGluZy1iYXIvY29yZS8iLCJzb3VyY2VzIjpbImxvYWRpbmctYmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFvQixNQUFNLE1BQU0sQ0FBQztBQUM1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sc0JBQXNCLENBQUM7OztBQUc1RTtJQWVFLDJCQUMrQixVQUFrQixFQUNDLE1BQTZCLEVBQ3pELElBQWE7UUFIbkMsaUJBSUk7UUFGOEMsdUJBQUEsRUFBQSxXQUE2QjtRQURoRCxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ0MsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFDekQsU0FBSSxHQUFKLElBQUksQ0FBUztRQWpCM0IsU0FBSSxHQUFzQyxFQUFFLENBQUM7UUFDN0MsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDOUIsV0FBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUNqRCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsU0FBUyxDQUFDLGNBQU0sT0FBQSxhQUFhLHdCQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLElBQUksQ0FB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UUFBUTtZQUN0QixPQUFBLE1BQU0sQ0FBQyxTQUFTLENBQ2QsVUFBQyxLQUFRLElBQUssT0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQU0sT0FBQSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLEVBQXBDLENBQW9DLEVBQ2xELFVBQUMsQ0FBTSxJQUFLLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBakIsQ0FBaUIsQ0FBQyxFQUFqQyxDQUFpQyxFQUM3QyxjQUFNLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFuQixDQUFtQixDQUFDLEVBQW5DLENBQW1DLENBQzFDO1FBSkQsQ0FJQyxDQUNGO0lBTkQsQ0FNQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExvYWRpbmdCYXJTdGF0ZSB9IGZyb20gJy4vbG9hZGluZy1iYXIuc3RhdGUnO1xuaW1wb3J0IHsgU3ViamVjdCwgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExPQURJTkdfQkFSX0NPTkZJRywgTG9hZGluZ0JhckNvbmZpZyB9IGZyb20gJy4vbG9hZGluZy1iYXIuY29uZmlnJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFyU2VydmljZSB7XG4gIHByaXZhdGUgcmVmczogeyBbaWQ6IHN0cmluZ106IExvYWRpbmdCYXJTdGF0ZSB9ID0ge307XG4gIHByaXZhdGUgc3RyZWFtcyQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICByZWFkb25seSB2YWx1ZSQgPSB0aGlzLnN0cmVhbXMkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgc3RhcnRXaXRoKG51bGwpLFxuICAgIHN3aXRjaE1hcCgoKSA9PiBjb21iaW5lTGF0ZXN0KC4uLk9iamVjdC5rZXlzKHRoaXMucmVmcykubWFwKChzKSA9PiB0aGlzLnJlZnNbc10udmFsdWUkKSkpLFxuICAgIHJ1bkluWm9uZSh0aGlzLnpvbmUpLFxuICAgIG1hcCgodikgPT4gTWF0aC5tYXgoMCwgLi4udikpLFxuICApO1xuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHZhbHVlJGAgaW5zdGVhZC4gKi9cbiAgZ2V0IHByb2dyZXNzJCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KExPQURJTkdfQkFSX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IExvYWRpbmdCYXJDb25maWcgPSB7fSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHpvbmU/OiBOZ1pvbmUsXG4gICkge31cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIHN0YXJ0KGluaXRpYWxWYWx1ZSA9IDIpIHtcbiAgICB0aGlzLnVzZVJlZigpLnN0YXJ0KGluaXRpYWxWYWx1ZSk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIHNldCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy51c2VSZWYoKS5zZXQodmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBpbmNyZW1lbnQodmFsdWU/OiBudW1iZXIpIHtcbiAgICB0aGlzLnVzZVJlZigpLmluY3JlbWVudCh2YWx1ZSk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIGNvbXBsZXRlKCkge1xuICAgIHRoaXMudXNlUmVmKCkuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnVzZVJlZigpLnN0b3AoKTtcbiAgfVxuXG4gIHVzZVJlZihpZDogc3RyaW5nID0gJ2RlZmF1bHQnKTogTG9hZGluZ0JhclN0YXRlIHtcbiAgICBpZiAoIXRoaXMucmVmc1tpZF0pIHtcbiAgICAgIHRoaXMucmVmc1tpZF0gPSBuZXcgTG9hZGluZ0JhclN0YXRlKHRoaXMuY29uZmlnKTtcbiAgICAgIHRoaXMuc3RyZWFtcyQubmV4dCgpO1xuXG4gICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgdGhpcy5yZWZzW2lkXS5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmc1tpZF07XG4gIH1cbn1cblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU3NDUyMzYxLzE0MDYwOTZcbmV4cG9ydCBmdW5jdGlvbiBydW5JblpvbmU8VD4oem9uZTogTmdab25lKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUPiB7XG4gIGlmICghem9uZSkge1xuICAgIHJldHVybiAoc291cmNlKSA9PiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gKHNvdXJjZSkgPT5cbiAgICBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+XG4gICAgICBzb3VyY2Uuc3Vic2NyaWJlKFxuICAgICAgICAodmFsdWU6IFQpID0+IHpvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQodmFsdWUpKSxcbiAgICAgICAgKGU6IGFueSkgPT4gem9uZS5ydW4oKCkgPT4gb2JzZXJ2ZXIuZXJyb3IoZSkpLFxuICAgICAgICAoKSA9PiB6b25lLnJ1bigoKSA9PiBvYnNlcnZlci5jb21wbGV0ZSgpKSxcbiAgICAgICksXG4gICAgKTtcbn1cbiJdfQ==